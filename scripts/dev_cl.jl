using Bolt
using PyPlot
using Unitful, UnitfulAstro, NaturallyUnitful
using OffsetArrays
using OrdinaryDiffEq
import Bolt: H‚ÇÄ
using ForwardDiff
using SpecialFunctions

# utility methods
Œ¥_kron(i, j) = (i == j) ? 1 : 0
‚àÇ‚Çì(f, x) = ForwardDiff.derivative(f, x)

function source_x_grid(k, xgrid, par)
    X‚Çë = Bolt.saha_peebles_recombination(par)
    œÑ, œÑ‚Ä≤, œÑ‚Ä≤‚Ä≤ = Bolt.œÑ_functions(xgrid, X‚Çë, par)
    gÃÉ, gÃÉ‚Ä≤ = Bolt.gÃÉ_functions(œÑ, œÑ‚Ä≤, œÑ‚Ä≤‚Ä≤)
    gÃÉ‚Ä≤‚Ä≤ = x -> ‚àÇ‚Çì(gÃÉ‚Ä≤, x)
    Œ∑ = Bolt.Œ∑_function(xgrid, par)
    ‚Ñã, ‚Ñã‚Ä≤ = x -> Bolt.‚Ñã(x, par), x -> Bolt.‚Ñã‚Ä≤(x, par)


    TCA_condition(k, ‚Ñã‚Çì, œÑ‚Çì‚Ä≤) = (abs(k / (‚Ñã‚Çì * œÑ‚Çì‚Ä≤)) < 0.1) & (abs(œÑ‚Çì‚Ä≤) > 10.0)

    # NOTE: NO NEUTRINOS ùí©
    function hierarchy!(du, u, p::AbstractCosmoParams, x)
        ‚Ñì·µß, Œ©_r, Œ©_b, Œ©_m = p.‚Ñì·µß, p.Œ©_r, p.Œ©_b, p.Œ©_m
        H‚ÇÄ¬≤ = H‚ÇÄ(p)^2
        ‚Ñã‚Çì, ‚Ñã‚Çì‚Ä≤ = ‚Ñã(x), ‚Ñã‚Ä≤(x)
        œÑ‚Çì‚Ä≤, œÑ‚Çì‚Ä≤‚Ä≤ = œÑ‚Ä≤(x), œÑ‚Ä≤‚Ä≤(x)
        a = x2a(x)
        R = 4Œ©_r / (3Œ©_b * a)

        # get array views of photon perturbations
        Œò = OffsetVector(view(u, 1:(‚Ñì·µß+1)), 0:‚Ñì·µß)  # indicies 0 through ‚Ñì·µß
        Œò‚Ä≤ = OffsetVector(view(du, 1:(‚Ñì·µß+1)), 0:‚Ñì·µß)
        Œò·µñ = OffsetVector(view(u, (‚Ñì·µß+2):(2‚Ñì·µß+2)), 0:‚Ñì·µß)  # indicies 0 through ‚Ñì·µß
        Œò·µñ‚Ä≤ = OffsetVector(view(du, (‚Ñì·µß+2):(2‚Ñì·µß+2)), 0:‚Ñì·µß)
        Œ¶, Œ¥, v, Œ¥_b, v_b = u[(2‚Ñì·µß+3):(2‚Ñì·µß+7)]

        # metric perturbations
        Œ® = -Œ¶ - 12H‚ÇÄ¬≤ / k^2 / a^2 * (Œ©_r * Œò[2])
        Œ¶‚Ä≤ = Œ® - k^2 / (3‚Ñã‚Çì^2) * Œ¶ + H‚ÇÄ¬≤ / (2‚Ñã‚Çì^2) * (
            Œ©_m * a^(-1) * Œ¥ + Œ©_b * a^(-1) * Œ¥_b + 4Œ©_r * a^(-2) * Œò[0])

        # matter
        Œ¥‚Ä≤ = k / ‚Ñã‚Çì * v - 3Œ¶‚Ä≤
        v‚Ä≤ = -v - k / ‚Ñã‚Çì * Œ®
        Œ¥_b‚Ä≤ = k / ‚Ñã‚Çì * v_b - 3Œ¶‚Ä≤

        Œò‚Ä≤[0] = -k / ‚Ñã‚Çì * Œò[1] - Œ¶‚Ä≤
        if TCA_condition(k, ‚Ñã‚Çì, œÑ‚Çì‚Ä≤)
            Œò‚Ä≤[2] = 0.0  # could be solved for
            term_3Œò‚Ä≤_vb‚Ä≤ = (
                -((1-R)*œÑ‚Çì‚Ä≤ + (1+R)*œÑ‚Çì‚Ä≤‚Ä≤) * (3Œò[1] + v_b) - k * Œ® / ‚Ñã‚Çì
                + (1 - ‚Ñã‚Çì‚Ä≤ / ‚Ñã‚Çì) * (k / ‚Ñã‚Çì) * (-Œò[0] + 2Œò[2]) + k / ‚Ñã‚Çì * (-Œò‚Ä≤[0] + 2Œò‚Ä≤[2])
            ) / ((1+R)*œÑ‚Çì‚Ä≤ + ‚Ñã‚Çì‚Ä≤ / ‚Ñã‚Çì - 1)
            v_b‚Ä≤ = (-v_b - k * Œ® / ‚Ñã‚Çì + R * (
                term_3Œò‚Ä≤_vb‚Ä≤ + k / ‚Ñã‚Çì * (-Œò[0] + 2Œò[2]) - k / ‚Ñã‚Çì * Œ®
            )) / (1+R)
            Œò‚Ä≤[1] = (term_3Œò‚Ä≤_vb‚Ä≤ - v_b‚Ä≤) / 3
        else
            v_b‚Ä≤ = -v_b - k / ‚Ñã‚Çì * Œ® + œÑ‚Çì‚Ä≤ * R * (3Œò[1] + v_b)
            Œò‚Ä≤[1] = k / (3‚Ñã‚Çì) * Œò[0] - 2k / (3‚Ñã‚Çì) * Œò[2] + k / (3‚Ñã‚Çì) * Œ® + œÑ‚Çì‚Ä≤ * (Œò[1] + v_b/3)
        end

        # photons
        Œ† = Œò[2] + Œò·µñ[2] + Œò·µñ[0]
        for ‚Ñì in 2:(‚Ñì·µß-1)
            Œò‚Ä≤[‚Ñì] = ‚Ñì * k / ((2‚Ñì+1) * ‚Ñã‚Çì) * Œò[‚Ñì-1] -
                (‚Ñì+1) * k / ((2‚Ñì+1) * ‚Ñã‚Çì) * Œò[‚Ñì+1] + œÑ‚Çì‚Ä≤ * (Œò[‚Ñì] - Œ† * Œ¥_kron(‚Ñì, 2) / 10)
        end
        # polarized photons
        Œò·µñ‚Ä≤[0] = -k / ‚Ñã‚Çì * Œò·µñ[1] + œÑ‚Çì‚Ä≤ * (Œò·µñ[0] - Œ† / 2)
        for ‚Ñì in 1:(‚Ñì·µß-1)
            Œò·µñ‚Ä≤[‚Ñì] = ‚Ñì * k / ((2‚Ñì+1) * ‚Ñã‚Çì) * Œò·µñ[‚Ñì-1] -
                (‚Ñì+1) * k / ((2‚Ñì+1) * ‚Ñã‚Çì) * Œò·µñ[‚Ñì+1] + œÑ‚Çì‚Ä≤ * (Œò·µñ[‚Ñì] - Œ† * Œ¥_kron(‚Ñì, 2) / 10)
        end
        # photon hierarchy boundary conditions
        Œò‚Ä≤[‚Ñì·µß] = k / ‚Ñã‚Çì * Œò[‚Ñì·µß-1] - (‚Ñì·µß + 1) / (‚Ñã‚Çì * Œ∑(x)) + œÑ‚Çì‚Ä≤ * Œò[‚Ñì·µß]
        Œò·µñ‚Ä≤[‚Ñì·µß] = k / ‚Ñã‚Çì * Œò·µñ[‚Ñì·µß-1] - (‚Ñì·µß + 1) / (‚Ñã‚Çì * Œ∑(x)) + œÑ‚Çì‚Ä≤ * Œò·µñ[‚Ñì·µß]

        du[(2‚Ñì·µß+3):(2‚Ñì·µß+7)] .= Œ¶‚Ä≤, Œ¥‚Ä≤, v‚Ä≤, Œ¥_b‚Ä≤, v_b‚Ä≤  # put non-photon perturbations back in
        return nothing
    end


    function adiabatic_initial_conditions(par::AbstractCosmoParams{T,DT}, x·µ¢) where {T,DT}
        ‚Ñì·µß = par.‚Ñì·µß
        u = zeros(DT, 2‚Ñì·µß+7)
        ‚Ñã‚Çì = Bolt.‚Ñã(x·µ¢, par)
        œÑ‚Çì‚Ä≤ = Bolt.œÑ‚Ä≤(x·µ¢, X‚Çë, par)
        Œò = OffsetVector(view(u, 1:(‚Ñì·µß+1)), 0:‚Ñì·µß)  # indicies 0 through ‚Ñì·µß
        Œò·µñ = OffsetVector(view(u, (‚Ñì·µß+2):(2‚Ñì·µß+2)), 0:‚Ñì·µß)  # indicies 0 through ‚Ñì·µß

        # metric and matter perturbations
        Œ¶ = 1.0
        Œ¥ = 3Œ¶ / 2
        Œ¥_b = Œ¥
        v = k / (2‚Ñã‚Çì) * Œ¶
        v_b = v

        # photon hierarchy
        Œò[0] = Œ¶ / 2
        Œò[1] = -k * Œ¶ / (6‚Ñã‚Çì)
        Œò[2] = -8k / (15‚Ñã‚Çì * œÑ‚Çì‚Ä≤) * Œò[1]
        Œò·µñ[0] = (5/4) * Œò[2]
        Œò·µñ[1] = -k / (4‚Ñã‚Çì * œÑ‚Çì‚Ä≤) * Œò[2]
        Œò·µñ[2] = (1/4) * Œò[2]
        for ‚Ñì in 3:‚Ñì·µß
            Œò[‚Ñì] = -‚Ñì/(2‚Ñì+1) * k/(‚Ñã‚Çì * œÑ‚Çì‚Ä≤) * Œò[‚Ñì-1]
            Œò·µñ[‚Ñì] = -‚Ñì/(2‚Ñì+1) * k/(‚Ñã‚Çì * œÑ‚Çì‚Ä≤) * Œò·µñ[‚Ñì-1]
        end

        u[(2‚Ñì·µß+3):(2‚Ñì·µß+7)] .= Œ¶, Œ¥, v, Œ¥_b, v_b  # pack back in
        return u
    end

    x·µ¢ = first(xgrid)
    u‚ÇÄ = adiabatic_initial_conditions(par, x·µ¢)
    prob = ODEProblem(hierarchy!, u‚ÇÄ, (x·µ¢ , 0.0), par)
    sol = solve(prob, AutoTsit5(Rodas5()), reltol=1e-10)

    function source_function(sol, k, x, par)
        u = sol(x)
        u‚Ä≤ = similar(u)
        hierarchy!(u‚Ä≤, u, par, x)

        ‚Ñì·µß = par.‚Ñì·µß
        H‚ÇÄ¬≤ = H‚ÇÄ(par)^2
        ‚Ñã‚Çì, ‚Ñã‚Çì‚Ä≤, ‚Ñã‚Çì‚Ä≤‚Ä≤ = ‚Ñã(x), ‚Ñã‚Ä≤(x), ‚àÇ‚Çì(‚Ñã‚Ä≤, x)
        œÑ‚Çì, œÑ‚Çì‚Ä≤, œÑ‚Çì‚Ä≤‚Ä≤ = œÑ(x), œÑ‚Ä≤(x), œÑ‚Ä≤‚Ä≤(x)
        gÃÉ‚Çì, gÃÉ‚Çì‚Ä≤, gÃÉ‚Çì‚Ä≤‚Ä≤ = gÃÉ(x), gÃÉ‚Ä≤(x), gÃÉ‚Ä≤‚Ä≤(x)

        # unpack variables from solution
        Œò = OffsetVector(u[1:(‚Ñì·µß+1)], 0:‚Ñì·µß)  # indicies 0 through ‚Ñì·µß
        Œò·µñ = OffsetVector(u[(‚Ñì·µß+2):(2‚Ñì·µß+2)], 0:‚Ñì·µß)  # indicies 0 through ‚Ñì·µß
        Œò‚Ä≤ = OffsetVector(u‚Ä≤[1:(‚Ñì·µß+1)], 0:‚Ñì·µß)  # indicies 0 through ‚Ñì·µß
        Œò·µñ‚Ä≤ = OffsetVector(u‚Ä≤[(‚Ñì·µß+2):(2‚Ñì·µß+2)], 0:‚Ñì·µß)  # indicies 0 through ‚Ñì·µß
        Œ† = Œò[2] + Œò·µñ[2] + Œò·µñ[0]
        Œ†‚Ä≤ = Œò‚Ä≤[2] + Œò·µñ‚Ä≤[2] + Œò·µñ‚Ä≤[0]
        Œ¶, Œ¥, v, Œ¥_b, v_b = u[(2‚Ñì·µß+3):(2‚Ñì·µß+7)]
        Œ¶‚Ä≤, Œ¥‚Ä≤, v‚Ä≤, Œ¥_b‚Ä≤, v_b‚Ä≤ = u‚Ä≤[(2‚Ñì·µß+3):(2‚Ñì·µß+7)]

        a = x2a(x)
        Œ® = -Œ¶ - 12H‚ÇÄ¬≤ / k^2 / a^2 * par.Œ©_r * Œò[2]
        Œ®‚Ä≤ = -Œ¶‚Ä≤ - 12H‚ÇÄ¬≤ / k^2 / a^2 * par.Œ©_r * (Œò‚Ä≤[2] - 2 * Œò[2])

        term1 =  gÃÉ‚Çì * (Œò[0] + Œ® + Œ†/4) + exp(-œÑ‚Çì) * (Œ®‚Ä≤ - Œ¶‚Ä≤)
        term2 = (-1/k) * (‚Ñã‚Çì‚Ä≤ * gÃÉ‚Çì * v_b + ‚Ñã‚Çì * gÃÉ‚Çì‚Ä≤ * v_b + ‚Ñã‚Çì * gÃÉ‚Çì * v_b‚Ä≤)
        Œ†‚Ä≤‚Ä≤ = 2k / (5‚Ñã‚Çì) * (-‚Ñã‚Çì‚Ä≤ / ‚Ñã‚Çì * Œò[1] + Œò‚Ä≤[1]) + (3/10) * (œÑ‚Çì‚Ä≤‚Ä≤ * Œ† + œÑ‚Çì‚Ä≤ * Œ†‚Ä≤) -
            3k / (5‚Ñã‚Çì) * (-‚Ñã‚Çì‚Ä≤ / ‚Ñã‚Çì * (Œò[3] + Œò·µñ[1] + Œò·µñ[3]) + (Œò‚Ä≤[3] + Œò·µñ‚Ä≤[1] + Œò·µñ‚Ä≤[3]))

        term3 = (3/(4k^2)) * (
            (‚Ñã‚Çì‚Ä≤^2 + ‚Ñã‚Çì * ‚Ñã‚Çì‚Ä≤‚Ä≤) * gÃÉ‚Çì * Œ† + 3 * ‚Ñã‚Çì * ‚Ñã‚Çì‚Ä≤ * (gÃÉ‚Çì‚Ä≤ * Œ† + gÃÉ‚Çì * Œ†‚Ä≤) +
            ‚Ñã‚Çì^2 * (gÃÉ‚Çì‚Ä≤‚Ä≤ * Œ† + 2gÃÉ‚Çì‚Ä≤ * Œ†‚Ä≤ + gÃÉ‚Çì * Œ†‚Ä≤‚Ä≤)
        )
        return term1 + term2 + term3
    end


    SÃÉ(x) = source_function(sol, k, x, par)
    return SÃÉ.(xgrid)
end

##

par = CosmoParams()
x·µ¢ = log(1e-8)
xgrid·µß = collect(-20:0.005:0.0)
H‚ÇÄ_ = H‚ÇÄ(par)
zgrid = x2z.(xgrid·µß)
Œ∑ = Bolt.Œ∑_function(xgrid·µß, par)
Œ∑‚ÇÄ = Œ∑(0.0)
kmin, kmax = 0.1H‚ÇÄ_, 1000H‚ÇÄ_
nk = 100
kgrid·µß = [kmin + (kmax - kmin) * (i/nk)^2 for i in 1:nk]

##
using ThreadPools

function generate_s_grid(par::AbstractCosmoParams{T,DT}, xgrid, kgrid) where {T,DT}
    grid = zeros(DT, length(xgrid), length(kgrid))
    @qthreads for k_i in eachindex(kgrid)
        grid[:,k_i] .= source_x_grid(kgrid[k_i], xgrid, par)
    end
    return grid
end

@time s_kx_grid = generate_s_grid(par, xgrid·µß, kgrid·µß)

##
using Interpolations
# @time ss = source_x_grid(340H‚ÇÄ(par), xgrid, par)
s_itp = LinearInterpolation((xgrid·µß, kgrid·µß), s_kx_grid, extrapolation_bc = Line())


‚ÑìÃÇ = 100
bessel_argmin = 0.0
bessel_argmax = kmax * Œ∑‚ÇÄ
Œîg = bessel_argmax / 5000

bessel_xgrid = bessel_argmin:Œîg:bessel_argmax
bessel_ygrid = [sphericalbesselj(‚ÑìÃÇ, x) for x in bessel_xgrid]
bes = LinearInterpolation((bessel_xgrid), bessel_ygrid, extrapolation_bc = Line())

clf()
kÃÇ = 340H‚ÇÄ(par)
plot(xgrid·µß, [s_itp(x, kÃÇ) * bes(kÃÇ*(Œ∑‚ÇÄ - Œ∑(x)))/1e-3 for x in xgrid·µß], "-", lw=0.5)

ylabel(raw"Source function $\times$ bessel")
xlabel(raw"$x$")
xlim(-8, 0)
ylim(-1, 3.5)
# xlim(-8,-6)
gcf()

##
function Œòl(k, s_itp, bes, xgrid, par::AbstractCosmoParams{T,DT}, Œ∑, Œ∑‚ÇÄ) where {T, DT}
    s = zero(DT)
    for i in 1:length(xgrid)-1
        x = xgrid[i]
        sb = bes(k*(Œ∑‚ÇÄ - Œ∑(x)))::DT
        source = s_itp(x, k)::DT
        s += sb * source * (xgrid[i+1] - xgrid[i])
    end
    return s
end

##
@time Œòl(340H‚ÇÄ_, s_itp, bes, xgrid·µß, par, Œ∑, Œ∑‚ÇÄ)
##

clf()
nk_dense = 5000
dense_kgrid = [kmin + (kmax - kmin) * (i/nk_dense)^2 for i in 1:nk_dense]

plot(dense_kgrid ./ H‚ÇÄ_,
    [Œòl(k, s_itp, bes, xgrid·µß, par, Œ∑, Œ∑‚ÇÄ)^2 / k / (1e-6 * H‚ÇÄ_^-1) for k in dense_kgrid],
     "-")
xlim(20,120)
gcf()

##
function Cl(‚Ñì, s_itp, xgrid, kgrid, par::AbstractCosmoParams{T,DT}, Œ∑, Œ∑‚ÇÄ) where {T,DT}
    bessel_argmin = 0.0
    bessel_argmax = kgrid[end] * Œ∑‚ÇÄ
    Œîg = bessel_argmax / 5000
    bessel_xgrid = bessel_argmin:Œîg:bessel_argmax
    bessel_ygrid = [sphericalbesselj(‚Ñì, x) for x in bessel_xgrid]
    bes = LinearInterpolation((bessel_xgrid), bessel_ygrid, extrapolation_bc = Line())

    s = zero(DT)
    for i in 1:length(kgrid)-1
        k = kgrid[i]
        dk = kgrid[i+1] - kgrid[i]
        th = Œòl(k, s_itp, bes, xgrid, par, Œ∑, Œ∑‚ÇÄ)::DT
        s += th^2 * dk / k
    end
    return s
end

@time Cl(100, s_itp, xgrid·µß, dense_kgrid, par, Œ∑, Œ∑‚ÇÄ)


##
function thCl(ells, s_itp, xgrid·µß, dense_kgrid, par, Œ∑, Œ∑‚ÇÄ)
    cltt = zeros(length(ells))
    @qthreads for (i,l) in enumerate(ells)
        cltt[i] = Cl(l, s_itp, xgrid·µß, dense_kgrid, par, Œ∑, Œ∑‚ÇÄ)
    end
    return cltt
end

ells = 100:20:1200
@time cltt = thCl(ells,  s_itp, xgrid·µß, dense_kgrid, par, Œ∑, Œ∑‚ÇÄ)

##
clf()
plt.plot(ells, cltt .* ells.^2)
ylabel(raw"$\ell^2 C_{\ell}^{TT}$")
xlabel(raw"$\ell$")
# yscale("log")
gcf()

##
